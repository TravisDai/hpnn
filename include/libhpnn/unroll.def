/* UNROLL engine for C  
 *
 * This is a macro-defined unrolling engine up to a 32nd level unroll.
 * Please use it only when _really_ needed, the syntax is:
UNROLL_FOR(init,end,magnitude,operation,index)
 * All but operation are int (unsigned most likely).
 * NO CHECK is performed anywhere, be sure of what you are doing.
 *
 * The following 3 conditions should be met:
 * 1- compiler failed to unroll some critical loop
 * 2- you are sure there is a GAIN
 * 3- you are sure this is SAFE
 * 
 * You MAY also want to use this for some compilers which does
 * not provide a way to control the unroll magnitude...
 * 
 * Most likely for GCC (and other) that do not provide a 
    #pragma unroll n
 * or any control of the unroll magnitude.
 * 
 * If you did not understand the meaning of this, DO NOT use this 
 * unroll engine.
 * 
 * 
 * NEW in this UNROLL engine:
 * 1- added OMP support, when required
 * 2- cleanup __INTEL_COMPILER section
 * 
 * HOWTO:
 * In your code, you want to unroll:

char name[32];
int i;
for(i=0;i<32;++i) name[32]='\0';

 * by an 8th magnitude. Simple use is:

char name[32];
int i;
#define OP_RAZ(ix) name[ix]='\0'
UNROLL_FOR(0,32,8,RAZ,i);
(...)
#undef OP_RAZ

 * PS: Don't forget to undef your OPeration.
 * In gcc C code, without OMP, this resolves to:

char name[32];
int i;
do{
        if (8>abs(32 -0)) {
                for(i=0;i<32;i++) {
                        name[i]='\0';
                }       
        }else{
                int uu=(32 -0)%8;
                for(i=0;i<uu;i++) {
                        name[i]='\0';
                }
                for(i=uu;i<32;i+=8){
                        do{
                                name[i]='\0';
                                name[i+1]='\0';
                                name[i+2]='\0';
                                name[i+2 +1]='\0';
                                name[i+4]='\0';
                                name[i+4 +1]='\0';
                                name[i+4 +2]='\0';
                                name[i+4 +2 +1]='\0';
                        }while(0);
                }
        }
}while(0);

 * where unrolling is quite explicit.
 * 
 * Mod: 2018-05 hubert.valencia _at_ laposte.net
 *      hubert.valencia _at_ imass.nagoya-u.ac.jp
 *
 * Mod: 2013-02 hubert.valencia _at_ laposte.net
 *      hubert.valencia _at_ riam.kyushu-u.ac.jp
 * 
 * Mod: 2012-10 hubert.valencia _at_ laposte.net
 *      hubert.valencia _at_ aist.go.jp
 * 
 * Org: 2008-04 hubert.valencia _at_ laposte.net
 */
#define PRAGMA(x) _Pragma(#x)
#define _OMP_FOR(ix) PRAGMA(omp parallel for private(ix))
//bash generated
#define INS_1(op,ix) OP_ ##op (ix)
#define INS_2(op,ix) INS_1(op,ix);INS_1(op,ix+1)
#define INS_3(op,ix) INS_2(op,ix);INS_1(op,ix+2)
#define INS_4(op,ix) INS_2(op,ix);INS_2(op,ix+2)
#define INS_5(op,ix) INS_4(op,ix);INS_1(op,ix+4)
#define INS_6(op,ix) INS_4(op,ix);INS_2(op,ix+4)
#define INS_7(op,ix) INS_4(op,ix);INS_3(op,ix+4)
#define INS_8(op,ix) INS_4(op,ix);INS_4(op,ix+4)
#define INS_9(op,ix) INS_8(op,ix);INS_1(op,ix+8)
#define INS_10(op,ix) INS_8(op,ix);INS_2(op,ix+8)
#define INS_11(op,ix) INS_8(op,ix);INS_3(op,ix+8)
#define INS_12(op,ix) INS_8(op,ix);INS_4(op,ix+8)
#define INS_13(op,ix) INS_8(op,ix);INS_5(op,ix+8)
#define INS_14(op,ix) INS_8(op,ix);INS_6(op,ix+8)
#define INS_15(op,ix) INS_8(op,ix);INS_7(op,ix+8)
#define INS_16(op,ix) INS_8(op,ix);INS_8(op,ix+8)
#define INS_17(op,ix) INS_16(op,ix);INS_1(op,ix+16)
#define INS_18(op,ix) INS_16(op,ix);INS_2(op,ix+16)
#define INS_19(op,ix) INS_16(op,ix);INS_3(op,ix+16)
#define INS_20(op,ix) INS_16(op,ix);INS_4(op,ix+16)
#define INS_21(op,ix) INS_16(op,ix);INS_5(op,ix+16)
#define INS_22(op,ix) INS_16(op,ix);INS_6(op,ix+16)
#define INS_23(op,ix) INS_16(op,ix);INS_7(op,ix+16)
#define INS_24(op,ix) INS_16(op,ix);INS_8(op,ix+16)
#define INS_25(op,ix) INS_16(op,ix);INS_9(op,ix+16)
#define INS_26(op,ix) INS_16(op,ix);INS_10(op,ix+16)
#define INS_27(op,ix) INS_16(op,ix);INS_11(op,ix+16)
#define INS_28(op,ix) INS_16(op,ix);INS_12(op,ix+16)
#define INS_29(op,ix) INS_16(op,ix);INS_13(op,ix+16)
#define INS_30(op,ix) INS_16(op,ix);INS_14(op,ix+16)
#define INS_31(op,ix) INS_16(op,ix);INS_15(op,ix+16)
#define INS_32(op,ix) INS_16(op,ix);INS_16(op,ix+16)
//head INS
#define INS_N__(nn,op,ix) INS_ ## nn (op,ix) 
# define UNROLL_N_(nn,op,ix) do{\
    INS_N__(nn,op,ix);\
    }while(0)
//loop define
// serial version:
#ifndef __INTEL_COMPILER
#define UNROLL_FOR(init,end,nn,op,ix) do{\
if (nn>abs(end-init)) {for(ix=init;ix<end;ix++) {OP_ ##op (ix);}\
} else {\
    int uu=(end-init)%nn;\
    for(ix=init;ix<uu;ix++) {OP_ ##op (ix);}\
    for(ix=uu;ix<end;ix+=nn){\
        UNROLL_N_(nn,op,ix);\
        }\
    }\
}while(0)
#else //__INTEL_COMPILER
#define UNROLL_FOR(init,end,nn,op,ix) PRAGMA(unroll(nn));\
    for(ix=init;ix<end;ix++) OP_ ##op (ix)
#endif //__INTEL_COMPILER
// parallel version:
#ifndef _OMP
/*#warning "no parallel unroll: use -D_OMP with -fopenmp"*/
#define UNROLL_OMP_FOR UNROLL_FOR
#else //_OMP
#ifndef OLD_GCC
#define _1ST_LOOP(ix,init,uu,op) PRAGMA(omp parallel for private(ix))\
    for(ix=init;ix<uu;ix++) {OP_ ##op (ix);}
#define _2ND_LOOP(ix,uu,end,nn,op) PRAGMA(omp parallel for private(ix))\
    for(ix=uu;ix<end;ix+=nn){UNROLL_N_(nn,op,ix);}
#else //OLD_GCC
/*#warning "OLD GCC version can't handle 2 pragma in 1 macro"*/
//in such case only the second loop is parallelized
#define _1ST_LOOP(ix,init,uu,op) for(ix=init;ix<uu;ix++) {\
        OP_ ##op (ix);}
#define _2ND_LOOP(ix,uu,end,nn,op) PRAGMA(omp parallel for private(ix))\
        for(ix=uu;ix<end;ix+=nn){UNROLL_N_(nn,op,ix);}
#endif //OLD_GCC
#define UNROLL_OMP_FOR(init,end,nn,op,ix) do{\
if (nn>abs(end-init)) {for(ix=init;ix<end;ix++) {OP_ ##op (ix);}\
} else {\
    int uu=(end-init)%nn;\
    _1ST_LOOP(ix,init,uu,op);\
    _2ND_LOOP(ix,uu,end,nn,op);\
    }\
}while(0)
#endif //_OMP
/* vim: filetype=c: set syntax=c */
